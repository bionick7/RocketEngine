#version 330 core

in vec2 uv;
in vec3 world_pos;

uniform float Edge;
uniform float Space;
uniform float Radius;
uniform float ScreenWidth;

uniform vec3 CameraPos;  // in world_pos
uniform vec3 CameraDir;
uniform vec3 Normal;

layout(location = 0) out vec3 color;

void main(){
	vec3 cam_pos = CameraPos - world_pos;
	float cam_dist = length(cam_pos);
	float horizon_angle = acos(dot(-cam_pos / cam_dist, Normal)) - 3.141592 / 2.0;  // both normalized
	float duv_dclip = cam_dist / (Radius  * sin(horizon_angle) * sin(horizon_angle));
	float delta = duv_dclip * 1 / ScreenWidth;

	float draw_max = 1;

	float vis_max = 1 - Edge * delta;
	float vis_min = vis_max - Space * delta;

	float r = dot(uv, uv);
	
	if(r > draw_max*draw_max){
		discard;
	}

	color = vec3(step(r, vis_max*vis_max) * step(vis_min*vis_min, r), 0, 0);
}